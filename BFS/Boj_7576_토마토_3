import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {
	
		// 입력
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		int M = Integer.parseInt(st.nextToken());
		int N = Integer.parseInt(st.nextToken());
		int map[][] = new int[N][M];
		boolean[][] isVisited = new boolean[N][M];
		int ans = -1;
		
		for(int i=0;i<N;i++) {
			st = new StringTokenizer(br.readLine()," ");
			for(int j=0;j<M;j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		Queue<int[]> q = new ArrayDeque<>();
		for(int i=0;i<N;i++) {
			for(int j=0;j<M;j++) {
				if(map[i][j] == 1) {
					isVisited[i][j] = true; 
					q.offer(new int[] {i,j});
				}
			}
		}
		
		// bfs
		int[] dr = {-1,1,0,0};
		int[] dc = {0,0,-1,1};
		
		while(!q.isEmpty()) {
			int size = q.size();
			while(size-->0) {
				int[] curr = q.poll();
				int r = curr[0];
				int c = curr[1];
				map[r][c] = 1;
				
				for(int d=0;d<4;d++) {
					
					int nr = r + dr[d];
					int nc = c + dc[d];
					
					if(nr<0 || nc<0 ||nr==N||nc==M) continue; // 경계 체크
					
					if(map[nr][nc]==-1) continue; // 비어있으면 넘어감
					
					if(isVisited[nr][nc]) continue; // 이미 큐에 있거나 방문했으면 넘어감
					
					isVisited[nr][nc] = true; 
					q.offer(new int[] {nr,nc});
				}
			}
			ans++;
		}
		
		// 익지않은 토마토가 있는지 확인
		for(int i=0;i<N;i++) {
			for(int j=0;j<M;j++) {
				if(map[i][j] == 0) {
					ans = -1;
					break;
				}
			}
		}
		System.out.println(ans);
	}

}
